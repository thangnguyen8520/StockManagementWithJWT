// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using StockManageBusinessObjects.Models;

namespace StockManageDAO;

public partial class Stocks2024DBContext : DbContext
{
    public Stocks2024DBContext()
    {
    }

    public Stocks2024DBContext(DbContextOptions<Stocks2024DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<StocksHistory> StocksHistories { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=THANGNGUYEN\\THANGNGUYEN;Initial Catalog=Stocks2024DB;User ID=sa;Password=1234567890");

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(GetConnectionString());
        }
    }
    private string GetConnectionString()
    {
        IConfiguration config = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", true, true)
                .Build();
        //return config["ConnectionStrings:DBConnect"];
        var strConn = config["ConnectionStrings:StockConnect"];
        return strConn;
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => e.StockCode).HasName("PK__Stocks__28E08C96AFEB01A7");
        });

        modelBuilder.Entity<StocksHistory>(entity =>
        {
            entity.HasOne(d => d.StockCodeNavigation).WithMany(p => p.StocksHistories).HasConstraintName("FK_StocksHistory_Stocks");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}